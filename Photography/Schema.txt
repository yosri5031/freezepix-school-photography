 MongoDB architecture 


// models/School.js
import mongoose from 'mongoose';

const SchoolSchema = new mongoose.Schema({
  name: {
    type: String,
    required: true
  },
  value: {
    type: String,
    required: true,
    unique: true
  },
  location: {
    type: String,
    required: true
  },
  country: {
    type: String,
    required: true
  },
  isActive: {
    type: Boolean,
    default: true
  }
});

export default mongoose.model('School', SchoolSchema);

// models/Event.js
const EventSchema = new mongoose.Schema({
  name: {
    type: String,
    required: true
  },
  value: {
    type: String,
    required: true,
    unique: true
  },
  date: {
    type: Date,
    required: true
  },
  schoolId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'School'
  },
  isActive: {
    type: Boolean,
    default: true
  }
});

export default mongoose.model('Event', EventSchema);

// models/Package.js
const PackageSchema = new mongoose.Schema({
  name: {
    type: String,
    required: true
  },
  value: {
    type: String,
    required: true
  },
  price: {
    type: Number,
    required: true
  },
  description: {
    type: String,
    required: true
  },
  isActive: {
    type: Boolean,
    default: true
  }
});

export default mongoose.model('Package', PackageSchema);

// models/Registration.js
const RegistrationSchema = new mongoose.Schema({
  parentFirstName: {
    type: String,
    required: true
  },
  parentLastName: {
    type: String,
    required: true
  },
  parentEmail: {
    type: String,
    required: true
  },
  studentFirstName: {
    type: String,
    required: true
  },
  studentLastName: {
    type: String,
    required: true
  },
  schoolId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'School',
    required: true
  },
  eventId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Event',
    required: true
  },
  packageId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Package',
    required: true
  },
  paymentMethod: {
    type: String,
    enum: ['credit', 'interac','Daycare'],
    required: true
  },
  paymentStatus: {
    type: String,
    enum: ['pending', 'completed', 'failed'],
    default: 'pending'
  },
  registrationDate: {
    type: Date,
    default: Date.now
  },
  amount: {
    type: Number,
    required: true
  },
  currency: {
    type: String,
    required: true,
    enum: ['USD', 'TND']
  }
});

export default mongoose.model('Registration', RegistrationSchema);

// models/Photographer.js
const PhotographerSchema = new mongoose.Schema({
  firstName: { type: String, required: true },
  lastName: { type: String, required: true },
  email: { type: String, required: true, unique: true },
  phone: { type: String },
  active: { type: Boolean, default: true }
}, { timestamps: true });

const Photographer = mongoose.models.Photographer || mongoose.model('Photographer', PhotographerSchema );

export default Photographer;

 API endpoints:
    // Get available events for a specific school
    app.get('/api/events/:schoolId', async (req, res) => {
      try {
        const events = await Event.find({ 
          school: req.params.schoolId, 
          status: 'active',
          date: { $gte: new Date() } 
        }).populate('school photographer');
        res.json(events);
      } catch (error) {
        res.status(500).json({ message: 'Error fetching events', error });
      }
    });
  
    // Create a new reservation
    app.post('/api/reservations', async (req, res) => {
      try {
        const { 
          eventId, 
          parent, 
          child, 
          package: packageDetails, 
          paymentMethod 
        } = req.body;
  
        // Generate unique QR Code (use a library like uuid)
        const uniqueQRCode = generateUniqueQRCode();
  
        const reservation = new Reservation({
          event: eventId,
          parent,
          child,
          package: packageDetails,
          paymentMethod,
          uniqueQRCode
        });
  
        await reservation.save();
  
        // Trigger payment processing 
        await processPayment(reservation);
  
        res.status(201).json({
          message: 'Reservation created successfully', 
          reservation,
          qrCodeUrl: generateQRCodeImage(uniqueQRCode)
        });
      } catch (error) {
        res.status(500).json({ message: 'Error creating reservation', error });
      }
    });
  
  
    // Upload photo for a reservation
    app.post('/api/reservations/:reservationId/upload', async (req, res) => {
      try {
        const { photoUrl } = req.body;
        const reservation = await Reservation.findByIdAndUpdate(
          req.params.reservationId,
          { 
            photoUrl, 
            photoStatus: 'taken' 
          },
          { new: true }
        );
  
        if (!reservation) {
          return res.status(404).json({ message: 'Reservation not found' });
        }
  
        res.json({ 
          message: 'Photo uploaded successfully', 
          reservation 
        });
      } catch (error) {
        res.status(500).json({ message: 'Error uploading photo', error });
      }
    });
  
   app.get('/schools', async (req, res) => {
      try {
        const schools = await School.find({ isActive: true });
        res.json(schools);
      } catch (error) {
        res.status(500).json({ message: error.message });
      }
    });
    
    // Get events by school
    app.get('/events/:schoolId', async (req, res) => {
      try {
        const events = await Event.find({
          schoolId: req.params.schoolId,
          isActive: true,
          date: { $gte: new Date() }
        }).sort({ date: 1 });
        res.json(events);
      } catch (error) {
        res.status(500).json({ message: error.message });
      }
    });
    
    // Get all packages
    app.get('/packages', async (req, res) => {
      try {
        const packages = await Package.find({ isActive: true });
        res.json(packages);
      } catch (error) {
        res.status(500).json({ message: error.message });
      }
    });
    
    // Create new registration
    app.post('/register', async (req, res) => {
      try {
        const {
          parentFirstName,
          parentLastName,
          parentEmail,
          studentFirstName,
          studentLastName,
          schoolId,
          eventId,
          packageId,
          paymentMethod
        } = req.body;
    
        // Get package price
        const packagename = await Package.findById(packageId);
        const school = await School.findById(schoolId);
    
        // Calculate price based on location
        let amount = packagename.price;
        let currency = 'USD';
        
        if (school.country.toLowerCase() === 'tunisia') {
          amount = packagename.price * 0.5;
          currency = 'TND';
        }
    
        const registration = new Registration({
          parentFirstName,
          parentLastName,
          parentEmail,
          studentFirstName,
          studentLastName,
          schoolId,
          eventId,
          packageId,
          paymentMethod,
          amount,
          currency
        });
    
        const newRegistration = await registration.save();
        res.status(201).json(newRegistration);
      } catch (error) {
        res.status(400).json({ message: error.message });
      }
    });
    
    // Get registration by ID
    app.get('/registration/:id', async (req, res) => {
      try {
        const registration = await Registration.findById(req.params.id)
          .populate('schoolId')
          .populate('eventId')
          .populate('packageId');
        res.json(registration);
      } catch (error) {
        res.status(500).json({ message: error.message });
      }
    });
  
   // Get photographer's assigned events
    app.get('/api/photographer/:photographerId/events', async (req, res) => {
      try {
        const events = await Event.find({ 
          photographer: req.params.photographerId, 
          status: 'active' 
        }).populate('school');
        
        const eventsWithReservations = await Promise.all(
          events.map(async (event) => {
            const reservations = await Reservation.find({ 
              event: event._id, 
              photoStatus: 'not_taken' 
            });
            return { ...event.toObject(), reservations };
          })
        );
  
        res.json(eventsWithReservations);
      } catch (error) {
        res.status(500).json({ message: 'Error fetching photographer events', error });
      }
    });
  
app.get('/schools', async (req, res) => {
  try {
    console.log('Fetching schools from database...');
    
    const schools = await School.find({ isActive: true })
      .select('name value location country isActive')
      .lean();
    
    console.log(`Found ${schools.length} active schools`);
    
    // Validate the data before sending
    const validatedSchools = schools.map(school => ({
      _id: school._id,
      name: school.name || '',
      value: school.value || '',
      location: school.location || '',
      country: school.country || '',
      isActive: Boolean(school.isActive)
    }));

    res.json(validatedSchools);
  } catch (error) {
    console.error('Error fetching schools:', error);
    res.status(500).json({ 
      message: 'Failed to fetch schools',
      error: error.message 
    });
  }
});

// Get events by school
app.get('/events/:schoolId', async (req, res) => {
  try {
    const schoolId = req.params.schoolId;
    console.log('Received schoolId:', schoolId);

    const events = await Event.find({
      schoolId: mongoose.Types.ObjectId(schoolId),
      isActive: true,
      date: { $gte: new Date() }
    }).sort({ date: 1 });

    console.log('Found events:', events);
    res.json(events);
  } catch (error) {
    console.error('Server-side error:', error);
    res.status(500).json({ message: error.message });
  }
});
// Get all packages
app.get('/packages', async (req, res) => {
  try {
    const packages = await Package.find({ isActive: true });
    res.json(packages);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

// Create new registration
app.post('/api/register', async (req, res) => {
  try {
    const {
      parentFirstName,
      parentLastName,
      parentEmail,
      studentFirstName,
      studentLastName,
      schoolId,
      eventId,
      paymentMethod
    } = req.body;

    // Generate unique registration ID
    const generateRegistrationId = () => {
      return `FP-${Math.random().toString(36).substr(2, 9).toUpperCase()}`;
    };
    const registrationId = generateRegistrationId();

    // Validate ObjectIds
    if (!mongoose.Types.ObjectId.isValid(schoolId)) {
      return res.status(400).json({ message: 'Invalid School ID' });
    }

    if (!mongoose.Types.ObjectId.isValid(eventId)) {
      return res.status(400).json({ message: 'Invalid Event ID' });
    }

    const school = await School.findById(schoolId);
    if (!school) {
      return res.status(404).json({ message: 'School not found' });
    }

    let paymentStatus = 'pending';
    
    // Set payment status based on payment method
    if (paymentMethod === 'daycare') {
      paymentStatus = 'awaiting_daycare_payment';
    } else if (paymentMethod === 'interac') {
      paymentStatus = 'awaiting_interac';
    }

    // Create new registration document
    const registration = new Registration({
      parentFirstName,
      parentLastName,
      parentEmail,
      studentFirstName,
      studentLastName,
      schoolId,
      eventId,
      paymentMethod,
      paymentStatus,
      registrationId: registrationId,
      registrationDate: new Date()
      // uniqueQRCode will be auto-generated by the pre-save hook
    });

    // Save the registration to the database
    const savedRegistration = await registration.save();
    
    // Send successful response with registration details
    res.status(201).json({
      ...savedRegistration.toObject(),
      registrationId: registrationId,
      uniqueQRCode: savedRegistration.uniqueQRCode
    });
  } catch (error) {
    console.error('Registration Error:', error);
    
    // Handle duplicate key error
    if (error.code === 11000) {
      return res.status(400).json({ 
        message: 'A registration with this ID already exists. Please try again.',
        error: error.message
      });
    }

    res.status(400).json({ 
      message: 'Registration validation failed',
      details: error.message 
    });
  }
});


// Get registration by ID
app.get('/registration/:id', async (req, res) => {
  try {
    const registration = await Registration.findById(req.params.id)
      .populate('School')
      .populate('Event')
      .populate('Package');
    res.json(registration);
  } catch (error) {
    res.status(500).json({ message: error.message });
  }
});

ADMIN PANEL DASHBORD 
import React, { useState, useEffect } from 'react';
import axios from 'axios';

const AdminPanel = () => {
  const [schools, setSchools] = useState([]);
  const [photographers, setPhotographers] = useState([]);
  const [events, setEvents] = useState([]);
  const [registrations, setRegistrations] = useState([]);

  useEffect(() => {
    fetchData();
  }, []);

  const fetchData = async () => {
    try {
      const schoolsResponse = await axios.get('/api/schools');
      setSchools(schoolsResponse.data);

      const photographersResponse = await axios.get('/api/photographers');
      setPhotographers(photographersResponse.data);

      const eventsResponse = await axios.get('/api/events');
      setEvents(eventsResponse.data);

      const registrationsResponse = await axios.get('/api/registrations');
      setRegistrations(registrationsResponse.data);
    } catch (error) {
      console.error('Error fetching data:', error);
    }
  };

  const handleSchoolAdd = async (school) => {
    try {
      await axios.post('/api/schools', school);
      fetchData();
    } catch (error) {
      console.error('Error adding school:', error);
    }
  };

  const handlePhotographerAdd = async (photographer) => {
    try {
      await axios.post('/api/photographers', photographer);
      fetchData();
    } catch (error) {
      console.error('Error adding photographer:', error);
    }
  };

  const handleEventAdd = async (event) => {
    try {
      await axios.post('/api/events', event);
      fetchData();
    } catch (error) {
      console.error('Error adding event:', error);
    }
  };

  const handleEventDelete = async (eventId) => {
    try {
      await axios.delete(`/api/events/${eventId}`);
      fetchData();
    } catch (error) {
      console.error('Error deleting event:', error);
    }
  };

  const handleRegistrationAssign = async (registrationId, photographerId) => {
    try {
      await axios.put(`/api/registrations/${registrationId}`, { photographerId });
      fetchData();
    } catch (error) {
      console.error('Error assigning photographer:', error);
    }
  };

  return (
    <div className="bg-white shadow-lg rounded-lg p-6">
      <h1 className="text-2xl font-bold mb-4">FreezePIX Admin Panel</h1>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        <div className="bg-gray-100 rounded-lg p-4">
          <h2 className="text-lg font-bold mb-2">Schools</h2>
          <ul className="space-y-2">
            {schools.map((school) => (
              <li key={school._id} className="bg-white rounded-lg p-2 shadow-sm">
                <h3 className="text-md font-medium">{school.name}</h3>
                <p className="text-sm text-gray-500">{school.location}, {school.country}</p>
              </li>
            ))}
          </ul>
          <button
            className="mt-4 bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg"
            onClick={() => handleSchoolAdd({ name: 'New School', location: 'City', country: 'Country' })}
          >
            Add School
          </button>
        </div>

        <div className="bg-gray-100 rounded-lg p-4">
          <h2 className="text-lg font-bold mb-2">Photographers</h2>
          <ul className="space-y-2">
            {photographers.map((photographer) => (
              <li key={photographer._id} className="bg-white rounded-lg p-2 shadow-sm">
                <h3 className="text-md font-medium">{photographer.firstName} {photographer.lastName}</h3>
                <p className="text-sm text-gray-500">{photographer.email}</p>
              </li>
            ))}
          </ul>
          <button
            className="mt-4 bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg"
            onClick={() => handlePhotographerAdd({ firstName: 'New', lastName: 'Photographer', email: 'new@example.com' })}
          >
            Add Photographer
          </button>
        </div>

        <div className="bg-gray-100 rounded-lg p-4">
          <h2 className="text-lg font-bold mb-2">Events</h2>
          <ul className="space-y-2">
            {events.map((event) => (
              <li key={event._id} className="bg-white rounded-lg p-2 shadow-sm">
                <h3 className="text-md font-medium">{event.name}</h3>
                <p className="text-sm text-gray-500">{event.date.toLocaleDateString()}</p>
                <p className="text-sm text-gray-500">{event.school.name}, {event.school.location}</p>
                <div className="flex justify-end">
                  <button
                    className="mr-2 bg-red-500 hover:bg-red-600 text-white px-2 py-1 rounded-lg"
                    onClick={() => handleEventDelete(event._id)}
                  >
                    Delete
                  </button>
                </div>
              </li>
            ))}
          </ul>
          <button
            className="mt-4 bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-lg"
            onClick={() => handleEventAdd({ name: 'New Event', date: new Date(), schoolId: schools[0]._id, photographerId: photographers[0]._id })}
          >
            Add Event
          </button>
        </div>
      </div>

      <div className="mt-8 bg-gray-100 rounded-lg p-4">
        <h2 className="text-lg font-bold mb-2">Registrations</h2>
        <ul className="space-y-2">
          {registrations.map((registration) => (
            <li key={registration._id} className="bg-white rounded-lg p-2 shadow-sm">
              <h3 className="text-md font-medium">{registration.studentFirstName} {registration.studentLastName}</h3>
              <p className="text-sm text-gray-500">{registration.event.name}</p>
              <p className="text-sm text-gray-500">{registration.school.name}</p>
              <div className="flex justify-between items-center">
                <p className="text-sm text-gray-500">{registration.paymentStatus}</p>
                <select
                  className="bg-gray-200 rounded-lg px-2 py-1 text-sm"
                  value={registration.photographerId}
                  onChange={(e) => handleRegistrationAssign(registration._id, e.target.value)}
                >
                  <option value="">Assign Photographer</option>
                  {photographers.map((photographer) => (
                    <option key={photographer._id} value={photographer._id}>
                      {photographer.firstName} {photographer.lastName}
                    </option>
                  ))}
                </select>
              </div>
            </li>
          ))}
        </ul>
      </div>
    </div>
  );
};

export default AdminPanel;